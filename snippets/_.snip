# Global snippets
include hql.snip

snippet     date
options     word
    `strftime("%d %b %Y")`

snippet     date_full
alias       df
options     word
    `strftime("%Y-%m-%dT%H:%M:%S")`

snippet     date_day
alias       dd
options     word
    `strftime("%Y-%m-%d")`

snippet     date_time
alias       dt
options     word
    `strftime("%H:%M:%S")`

snippet skeleton
	/***************************************************************************
	 *
	 * Copyright (c) `strftime("%Y")` Baidu.com, Inc. All Rights Reserved
	 *
	 **************************************************************************/

	/***************************************************************************
	 * Name        : `expand("%:t")`
	 * Author      : liurongyou
	 * Create Time : `strftime("%Y-%m-%d %H:%M:%S")`
	 * Description : `expand("%:t")`
	 **************************************************************************/


	/* vim: set ts=4 sw=4: */

snippet fcomment
	/**
	 * @brief   ${1}
	 *
	 * @param   ${2}
	 *
	 * @return  ${4}
	 */

snippet make
	CC=g++

	aa: aa.o
		$(CC) -o $@ $^

	aa.o: aa.cpp
		$(CC) -c $^

snippet header
	#ifndef __`toupper(substitute(expand("%:t"), '\.', '_', 'g'))`
	#define __`toupper(substitute(expand("%:t"), '\.', '_', 'g'))`
	${1}
	#endif


snippet extern
    extern "C" {
    ${1}
    }

snippet baidu_ns
	namespace baidu {
	namespace dt {
	namespace udw {
	namespace ${1} {
	${3}
	} //namespace baidu 
	} // namespace dt 
	} //namespace udw
	} //namespace ${2}

snippet lry_ns
	namespace lry{
	namespace ${1} {
	${3}
	} //namespace lry
	} //namespace ${2}

snippet skeleton1
	/***************************************************************************
	 * Name        : `expand("%:t")`
	 * Author      : liurongyou
	 * Create Time : `strftime("%Y-%m-%d %H:%M:%S")`
	 * Description : `expand("%:t")`
	 **************************************************************************/


	/* vim: set ts=4 sw=4: */
snippet cmake
	cmake_minimum_required(VERSION 2.8.3)
	if(WIN32)
		set(CMAKE_C_COMPILER mingw32-gcc)
		set(CMAKE_CXX_COMPILER mingw32-g++)
		enable_testing()
	else()
		add_subdirectory(/usr/src/gtest src/gtest)
		include_directories( "/usr/include/gtest" )
	endif()
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g -lpthread")
	project(${1})
	include_directories(include)
	add_executable(${2})
	target_link_libraries(${3} ${TEST_SOURCES} gtest gtest_main pthread)

snippet disallow
   #define DISALLOW_COPY_AND_ASSIGN(TypeName) TypeName(const TypeName&);void operator=(const TypeName&)
# wiki snippets
snippet code
    <code ${1}>
    ${2}
    </code>
snippet title2
    ===== ${1} =====

snippet title3
    ==== ${1} ====

snippet title1
    ====== ${1} ======

snippet title4
    === ${1} ===

snippet links
    [[${1} | ${2}]]

#bash skeleton
snippet bashhead
	# global start
	${1}
	# global end
	function main() {
	    return 0
	}

	main

snippet hqlhead
	SET mapred.job.map.capacity=1000;
	SET mapred.job.reduce.capacity=1000;
	SET mapred.job.priority=HIGH;
